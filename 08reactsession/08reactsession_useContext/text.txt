PropDRilling:
Testcontext=>mode,setMode
    >List
        >ListItem
             >Button


If i want to pass this mode and setMode data to button what will i use Props Drilling right.
So i will have to pass from parent to children and children to another children

But that is an bad approach.
When we have a use case like this , where you need same data accross all app
You have to store it in a central space.
So you need to have this data in your react app so you will store it in the central space
which is known as React Context.

There are various ways to do this.
Some big companies use Redux store to handle this type of data,
From this concept only React store came into picture

It is like an shared store for whole App and any component can use that data without seeing things.
React Context is one such thing which we are going to study now.
Why we are using it, because we want some piece of data to be accessible anywhere in the app.
So this is kind of an central place where will store the data.
React Context is an very powerful tool given by React.

Lets us Start.
Step1: Create an Context.
We will create context in seperate files.
    utilis>
        ModeContext.js

import {createContext} from 'react'
createContext is basically a function and it takes some data which we need to pass acrross our Application.

const [mode, setMode] = useState("light");
const ModeContext=createContext(
    //It takes the default value of the context.
    [mode, setMode]
)
export default ModeContext;

Now we have ModeContext, but do we use it.
Now, i want to read this information in Button 

Step2: Use the createContext
For that useContext.

import {useContext} from 'react'
import {ModeContext} from 'ModeContext'
Now useContext is a hook and hook is at the end of the day is function.
const [mode, setMode]=useContext(ModeContext)

So this so easy then drilling an props.
So why do we even need Props, can i keep everything in Context.
Context has a sepearte thing and state and props are seperate 
State and Props are teid to the component
Context is central store so you dont use Context for everything.
You use Context for Data which is required for all across the application in different different places.
Its like an central data for all your component.

Context is an useState for all your whole big application.
Most amazing part of context is , you can use Context whereever we wish to.

UserContext.Provider is used to modify the createContext data.
So we wrapp it up everything 




